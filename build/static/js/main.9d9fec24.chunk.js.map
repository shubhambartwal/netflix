{"version":3,"sources":["Navbar.js","axios.js","Row.js","requests.js","Banner.js","App.js","index.js"],"names":["Navbar","className","src","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","map","movie","onClick","moviename","name","orginal_name","console","log","movieTrailer","then","url","urlParamV","URLSearchParams","URL","search","catch","err","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","hight","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d9fec24.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Navbar.css';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div className=\"nav\">\r\n        <img\r\n        className=\"nav__logo\"\r\n        src=\"https://www.xda-developers.com/files/2019/03/Netflix-Logo-810x298_c.png\"\r\n      />\r\n      <img\r\n        className=\"nav__avatar\"\r\n        src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n      />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\n\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  const youtubeOpts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const movieClicked = (moviename) => {\r\n    console.log(moviename);\r\n    if (trailerUrl !== \"\") setTrailerUrl(\"\");\r\n    else {\r\n      movieTrailer(moviename)\r\n        .then((url) => {\r\n          const urlParamV = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParamV.get(\"v\"));\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {/* <div className=\"row__posters\"> */}\r\n        {movies.map((movie) => (\r\n          <img\r\n            onClick={() =>\r\n              movieClicked(movie.name || movie.title || movie.orginal_name)\r\n            }\r\n            key={movie.id}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} //use && if theres no else or : otherwise use ?\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n        {/* </div> */}\r\n      </div>\r\n      {trailerUrl !== \"\" && <YouTube videoId={trailerUrl} opts={youtubeOpts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;","const API_KEY=\"861e016d67f33ada307fe2a0d89b288c\";\r\n\r\nconst requests = {\r\n  fetchTrending: `trending/all/day?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;","import React,{useState,useEffect} from 'react';\r\nimport axios from './axios';\r\nimport './Banner.css';\r\nimport requests from './requests';\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nexport default function Banner() {\r\n    const[movie,setMovie]=useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\nuseEffect(()=>\r\n    {\r\n        async function fetchData(){\r\n            //all the random movies from netflix originals\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n              request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length)\r\n              ]\r\n            );\r\n            return request; \r\n          }\r\n          fetchData();\r\n\r\n        }, []);\r\n         console.log(movie);\r\n         const youtubeOpts = {\r\n            hight :\"500px\",\r\n            width: \"100%\",\r\n            playerVars: {\r\n              autoplay: 1,\r\n            },\r\n          };\r\n         const movieClicked = (moviename) => {\r\n            console.log(moviename);\r\n            if (trailerUrl !== \"\") setTrailerUrl(\"\");\r\n            else {\r\n              movieTrailer(moviename)\r\n                .then((url) => {\r\n                  const urlParamV = new URLSearchParams(new URL(url).search);\r\n                  setTrailerUrl(urlParamV.get(\"v\"));\r\n                })\r\n                .catch((err) => console.log(err));\r\n            }\r\n          };\r\n\r\n    return (\r\n         \r\n        <header className=\"banner\" \r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url('${base_url}${movie?.backdrop_path}')`,\r\n            backgroundPosition: \"center center\"\r\n          }} >\r\n          {/* background image */}\r\n        \r\n          <div className=\"banner__contents\">\r\n        {/*title */}\r\n        {/*some movies have name some title some original name so this condition for title */}\r\n        <h1 className=\"banner__title\">{movie?.name || movie?.title || movie?.orginal_name}</h1>\r\n        \r\n\r\n        { /*2 button */}\r\n        <div className=\"banner__buttons\">\r\n        <button className =\"banner__button\" onClick={() =>\r\n            movieClicked(movie.name || movie.title || movie.orginal_name)\r\n          }\r\n          >Play</button>\r\n        <button className =\"banner__button\">My List</button>\r\n        </div>\r\n\r\n        { /* description */}\r\n<h1 className=\"banner__description\">{movie?.overview}</h1>\r\n\r\n\r\n        </div>    \r\n        <div className=\"banner--fadeBottom\" />         \r\n        {trailerUrl != \"\" && <YouTube videoId={trailerUrl} opts={youtubeOpts} />}   \r\n        </header>\r\n        \r\n    )\r\n}\r\n","import React from \"react\";\nimport './App.css';\nimport Navbar from './Navbar';\nimport Row from \"./Row\";\nimport request from './requests';\nimport Banner from './Banner';\nfunction App() {\n  return (\n    <div className=\"app\">\n    {/* Navbar */}\n    <Navbar />\n    {/*banner */}\n    <Banner />\n\n   <Row title =\"NETFLIX ORIGINALS\" fetchUrl={request.fetchNetflixOriginals} isLargeRow />\n   <Row title  =\"Trending Now\" fetchUrl={request.fetchTrending} />\n   <Row title =\"Top Rated\"  fetchUrl={request.fetchTopRated}/>\n   <Row title=\" Action Movies\" fetchUrl={request.fetchActionMovies} />\n   <Row title=\" Comedy Movies\" fetchUrl={request.fetchComedyMovies} />\n   <Row title=\" Horror Movies\" fetchUrl={request.fetchHorrorMovies} />\n   <Row title=\" Romance Movies\" fetchUrl={request.fetchRomanceMovies} />\n   <Row title=\" Documentaries\" fetchUrl={request.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n\n\n//https://api.themoviedb.org/3/movie/550?api_key=861e016d67f33ada307fe2a0d89b288c","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}